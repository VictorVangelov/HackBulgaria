package interviewTasks;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Stack;
 
 
public class NonrecursiveDFS {
     
	  public NonrecursiveDFS(Graph G, int s) {
	        marked = new boolean[G.V()];

	        // to be able to iterate over each adjacency list, keeping track of which
	        // vertex in each adjacency list needs to be explored next
	        Iterator<Integer>[] adj = (Iterator<Integer>[]) new Iterator[G.V()];
	        for (int v = 0; v < G.V(); v++)
	            adj[v] = G.adj(v).iterator();

	        // depth-first search using an explicit stack
	        Stack<Integer> stack = new Stack<Integer>();
	        marked[s] = true;
	        stack.push(s);
	        while (!stack.isEmpty()) {
	            int v = stack.peek();
	            if (adj[v].hasNext()) {
	                int w = adj[v].next();
	                if (!marked[w]) {
	                    // discovered vertex w for the first time
	                    marked[w] = true;
	                    // edgeTo[v] = w;
	                    stack.push(w);
	                }
	            }
	            else {
	                // v's adjacency list is exhausted
	                stack.pop();
	            }
	        }
	    }
     
     
    // ----------------------------------------------------------------------
    // Testing our implementation
    public static void main(String[] args) {
         
        // Create adjacency list representation
        ArrayList<ArrayList<Integer>> adjLists = new ArrayList<ArrayList<Integer>>();
        final int n = 7;
         
        // Add an empty adjacency list for each vertex
        for(int v=0; v<n; v++){
            adjLists.add(new ArrayList<Integer>());
        }
         
        // insert neighbors of vertex 0 into adjacency list for vertex 0
        adjLists.get(0).add(1);
        adjLists.get(0).add(2);
        adjLists.get(0).add(3);
         
        // insert neighbors of vertex 1 into adjacency list for vertex 1
        adjLists.get(1).add(5);
        adjLists.get(1).add(6);
         
        // insert neighbors of vertex 2 into adjacency list for vertex 2
        adjLists.get(2).add(4);
     
        // insert neighbors of vertex 3 into adjacency list for vertex 3
        adjLists.get(3).add(2);
        adjLists.get(3).add(4);
 
        // insert neighbors of vertex 4 into adjacency list for vertex 4
        adjLists.get(4).add(1);
 
        // insert neighbors of vertex 5 into adjacency list for vertex 5
        // -> nothing to do since vertex 5 has no neighbors
         
        // insert neighbors of vertex 6 into adjacency list for vertex 5
        adjLists.get(6).add(4);
         
        // Print vertices in the order in which they are visited by dfs()
        dfs_iterative(adjLists, 0);
    }
}