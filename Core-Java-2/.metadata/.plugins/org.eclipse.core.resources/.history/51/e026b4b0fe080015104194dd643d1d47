package WebCrawer;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.http.client.fluent.Async;
import org.apache.http.client.fluent.Content;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.concurrent.FutureCallback;

import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RequestMaker implements Runnable {
	private static URL requestURL = null;
	private static Request request;
	private Async async;
	private Future<Content> future;
	private String nextRequestUrl;

	private URL currentUrl;

	public RequestMaker() {
		ExecutorService threadpool = Executors.newCachedThreadPool();
		 async = Async.newInstance().use(threadpool);
	}

	@Override
	public void run() {
		synchronized (WebCrawler.stillNotVisited) {
			while (WebCrawler.stillNotVisited.isEmpty()) {
				try {
					WebCrawler.stillNotVisited.wait();
				} catch (InterruptedException e) {
				}
			}
			// /To Ask Phil , is that correct way to do this Sh*t;
			while (!WebCrawler.hrefContainer.isEmpty()) {
				nextRequestUrl = WebCrawler.hrefContainer.poll();
				executeNewRequest(nextRequestUrl);

			}
			// And here
			WebCrawler.stillNotVisited.notifyAll();

		}
	}

	public synchronized void executeNewRequest(String preparedLink) {
		try {
			requestURL = new URL(preparedLink);
		} catch (MalformedURLException e) {
			System.out.printf("%s is malformated%n", preparedLink);
		}
		request = Request.Get(preparedLink);
		future = async.execute(request, new FutureCallback<Content>() {
			@Override
			public void cancelled() {
			}

			@Override
			public void completed(final Content content) {
				WebCrawler.contentContainer.add(content.asString());
				WebCrawler.visitedUrls.add(currentUrl);
				WebCrawler.contentContainer.notifyAll();
			}

			@Override
			public void failed(Exception e) {
				System.out.println(e.getMessage() + ": " + request);
				try {
					WebCrawler.failedUrls.add(new URL(preparedLink));
				} catch (MalformedURLException e1) {
					System.out.printf("%s is malformated%n", preparedLink);
				}
			}
		});
	}

}
