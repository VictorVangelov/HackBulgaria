package WebCrawer;

import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;

import org.apache.commons.io.IOUtils;
import org.apache.http.concurrent.FutureCallback;

import com.google.common.util.concurrent.Futures;
import com.google.common.util.concurrent.ListenableFuture;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.google.common.util.concurrent.MoreExecutors;

public class RequestMaker  {
	static ListeningExecutorService pool = MoreExecutors
			.listeningDecorator(Executors.newCachedThreadPool());
	
	public void makeRequest() {
		while (!WebCrawler.stillNotVisited.isEmpty()) {
			URL currentUrl = WebCrawler.stillNotVisited.poll();
			final ListenableFuture<String> future = pool
					.submit(new Callable<String>() {
						@Override
						public String call() throws Exception {
							return IOUtils.toString(currentUrl
									,
									StandardCharsets.UTF_8);
						}
					});
			Futures.addCallback(
					future,
					new com.google.common.util.concurrent.FutureCallback<String>() {
						@Override
						public void onFailure(Throwable error) {
							System.out.println("failere\n" + error.getCause());
						}

						@Override
						public void onSuccess(String content) {
							// Is that a correct way to do that Shit
							WebCrawler.urlAndTitels.put(currentUrl, WebCrawler.getTitels(content));
							UrlPreparer.fulfillNotVisited(content);
						}
					});
		}
		try {
			WebCrawler.stillNotVisited.wait();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}




		/*
		 * future.addListener(new Runnable() {
		 * 
		 * @Override public void run() { try { final String contents =
		 * future.get(); WebCrawler.contentContainer.add(contents); } catch
		 * (InterruptedException e) { // log.error("Interrupted", e); } catch
		 * (ExecutionException e) { System.out.println("Exception in task" +
		 * e.getCause()); // log.error("Exception in task", e.getCause()); } }
		 * }, MoreExecutors.sameThreadExecutor());
		 */

	}

