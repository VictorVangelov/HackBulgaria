package CourseTasks;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.http.client.fluent.Async;
import org.apache.http.client.fluent.Content;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.concurrent.FutureCallback;

import java.util.concurrent.ConcurrentLinkedQueue;

public class ContentGetter {
	private static URIBuilder builder;
	private static URL requestURL = null;
	private static Request request;
	private ExecutorService threadpool;
	private Async async;
	private Future<Content> future;
	private static CopyOnWriteArrayList<String> visited = new CopyOnWriteArrayList<String>();
	private static CopyOnWriteArrayList<String> stillNotVisited = new CopyOnWriteArrayList<String>();

	public ContentGetter() {
		threadpool = Executors.newCachedThreadPool();
		async = Async.newInstance().use(threadpool);
		FutureCallback<Content> futureCallBack = new FutureCallback<Conten>(){
			public void failed (final Exception e) {
			
	    }
	    public void completed (final Content content) {
	        System.out.println("Request completed: "+ request);
	        System.out.println("Response:\n"+ content.asString());
	    }

	    public void cancelled () {}
	};
		future = new Future<Content>() ;

	}

	protected static ConcurrentLinkedQueue<Content> hrefContainer;

	public void addNewURL(String preparedLink) {
		try {
			requestURL = new URL(preparedLink);
		} catch (MalformedURLException e) {
			System.out.printf("%s is malformated%n", preparedLink);
		}
		request = Request.Get(preparedLink);
		future = async.execute(request, new FutureCallback<Content>());

	}

}
