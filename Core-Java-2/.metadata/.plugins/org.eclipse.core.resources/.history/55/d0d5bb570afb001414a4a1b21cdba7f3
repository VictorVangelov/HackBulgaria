package CourseTasks;

import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.apache.http.client.fluent.Async;
import org.apache.http.client.fluent.Content;
import org.apache.http.client.fluent.Request;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.concurrent.FutureCallback;

import java.util.concurrent.ConcurrentLinkedQueue;

public class RequestMaker {
	private static URL requestURL = null;
	private static Request request;
	private ExecutorService threadpool;
	private Async async;
	private Future<Content> future;


	
	private URL currentUrl;

	public RequestMaker() {
		threadpool = Executors.newCachedThreadPool();
		async = Async.newInstance().use(threadpool);
		}

	protected static ConcurrentLinkedQueue<Content> hrefContainer;

	public void addNewURL(String preparedLink) {
		try {
			requestURL = new URL(preparedLink);
		} catch (MalformedURLException e) {
			System.out.printf("%s is malformated%n", preparedLink);
		}
		request = Request.Get(preparedLink);
		future = async.execute(request, new FutureCallback<Content>() {
			@Override
			public void cancelled() {
			}

			@Override
			public void completed(final Content content) {
				WebCrawler.contentContainer.add(content.asString());
				WebCrawler.visitedUrls.add(currentUrl);
				WebCrawler.contentContainer.notifyAll();
			}

			@Override
			public void failed(Exception e) {
				System.out.println(e.getMessage() + ": " + request);
				try {
					WebCrawler.failedUrls.add(new URL(preparedLink));
				} catch (MalformedURLException e1) {}
			}
		});
	}

}
